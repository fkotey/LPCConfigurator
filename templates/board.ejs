// Board Hardware configuration file for <%- board.caption %>
// generated by RepRapFirmware Configuration Tool (LPC Version) v2 
// on <%- (new Date()).toString() %>

//Note: Each line should be less than 120 characters.
//    : Unwanted options can be commented out or set to NoPin. Lines commented out will get default values
//    : for pins the default is NoPin.
//    : Values for Arrays need to be contained within { and }
//    : Comments can be defined with // or # (comments are not supported inside arrays)
//    : Each config entry must be all on a single line.

lpc.board = <%- template.lpc.boardName %>; 

//LED blinks to indicate Platform is spinning or other diagnostic 
//Comment out or set to NoPin if not wanted.
leds.diagnostic = <%- template.lpc.diagnosticPin %>; 

atxPowerPin = <%- template.lpc.atxPowerPin %>;
atxPowerPinInverted = false;

//Internal SDCard SPI Frequency.
lpc.internalSDCard.spiFrequencyHz  = <%- template.lpc.internalSDCardSPIFrequencyHz %>;

//Only supports 1 External SDCard
<%- (template.lpc.externalSDCard.present)?"":"//" -%>externalSDCard.csPin               = <%- template.lpc.externalSDCard.csPin %>;
<%- (template.lpc.externalSDCard.present)?"":"//" -%>externalSDCard.cardDetectPin       = <%- template.lpc.externalSDCard.cardDetectPin %>;
<%- (template.lpc.externalSDCard.present)?"":"//" -%>lpc.externalSDCard.spiFrequencyHz  = <%- template.lpc.externalSDCard.spiFrequencyHz %>;
<%- (template.lpc.externalSDCard.present)?"":"//" -%>lpc.externalSDCard.spiChannel  = <%- template.lpc.externalSDCard.spiChannel %>;

//LCD Pins (only ST9720 SPI currently supported)
<% if(template.lpc.lcd.spiChannel == 2) //softwareSPI
	{ -%>
//setup the Software SPI Pins for LCD
lpc.softwareSPI.pins = {<%- util.makePlainArrayString(template.lpc.softwareSPI.pins) %>}; //Set to GPIO pins to use as SCK, MISO, MOSI
<%	} -%>
<%- (template.lpc.lcdEnabled)?"":"//" -%>lcd.spiChannel =       <%- template.lpc.lcd.spiChannel %>;
<%- (template.lpc.lcdEnabled)?"":"//" -%>lcd.lcdCSPin =       <%- template.lpc.lcd.lcdCSPin %>;
<%- (template.lpc.lcdEnabled)?"":"//" -%>lcd.lcdBeepPin =     <%- template.lpc.lcd.lcdBeepPin %>;
<%- (template.lpc.lcdEnabled)?"":"//" -%>lcd.encoderPinA =    <%- template.lpc.lcd.encoderPinA %>;
<%- (template.lpc.lcdEnabled)?"":"//" -%>lcd.encoderPinB =    <%- template.lpc.lcd.encoderPinB %>;
<%- (template.lpc.lcdEnabled)?"":"//" -%>lcd.encoderPinSw =   <%- template.lpc.lcd.encoderPinSw %>; //click
<%- (template.lpc.lcdEnabled)?"":"//" -%>lcd.lcdDCPin =       <%- template.lpc.lcd.lcdDCPin %>;  //DataControl Pin (A0) if none used set to NoPin
<%- (template.lpc.lcdEnabled)?"":"//" -%>lcd.panelButtonPin = <%- template.lpc.lcd.panelButtonPin %>; //Extra button on Viki and RRD Panels (reset/back etc configurable)


<%
	//HW PWM Channels
	let pwmPins = [
		["1.18", "2.0"],
		["1.20", "2.1", "3.25"],
		["1.21", "2.2", "3.26"],
		["1.23", "2.3"],
		["1.24", "2.4"],
		["1.26", "2.5"],
	];

	let usedPWMChannels = [false, false, false, false, false, false ]; //track which channels have been used
	let slowPWMPins = [];
	let fastPWMPins = [];
	let servoPins = []; 
	let tempSensePins = [];


	function isHWPWMCapable(pin) {
		var channel = -1;
		for(var i=0; i<pwmPins.length; i++){
			for(var j=0; j<pwmPins[i].length; j++){
				if(pwmPins[i][j] == pin) return i; // found HW PWMPin channel
			}
		}
		return channel;
	}
//also check pins are not -1 
	function assignFastPWMPin(pin){
		let channel = isHWPWMCapable(template.lpc.heatOnPins[i]);
		if(channel != -1 && usedPWMChannels[i] == false){
			//this pin will use HWPWM
			usedPWMChannels[i] = true;
		} else {
			//this pin needs a timer PWM
			fastPWMPins.push(pin);
		}
	}

	//Bed heater [0] always goes on 10Hz Timer PWM.
	if(template.bed.present){
		if(template.heaters[0].heater != -1 && template.heaters[0].heater != "NoPin" && template.heaters[0].heater != ""){
			slowPWMPins.push(template.heaters[0].heater);
		}

		if(template.heaters[0].channel != -1 && template.heaters[0].channel != "NoPin" && template.heaters[0].channel != ""){
			tempSensePins.push(template.heaters[0].channel);
		}

		
	}
	
	//Heater/Fan Pins either go on HWPWM if avail or on 250Hz Timer PWM
	for(var i=1; i<template.heaters.length; i++){
		if(template.heaters[i].heater != -1 && template.heaters[i].heater != "NoPin" && template.heaters[i].heater != ""){
			assignFastPWMPin(template.heaters[i].heater);
		}

		if(template.heaters[i].channel != -1 && template.heaters[i].channel != "NoPin" && template.heaters[i].channel != ""){
			tempSensePins.push(template.heaters[i].channel);
		}

		
	}

	//fans
	for(var i=0; i<template.fans.length; i++){
		if(template.fans[i].fanPin != -1 && template.fans[i].fanPin != "NoPin" && template.fans[i].fanPin != ""){
			assignFastPWMPin(template.fans[i].fanPin);
		}
	}

	//set the pins defined on the board (if exist)
	for(var i=0; i<board.lpc.servoPins.length; i++){
		servoPins.push(board.lpc.servoPins[i].value);
	}
	
	//define servo pin manually entered for BLTouch
	if( template.lpc.manualServoPin != "NoPin" ) servoPins.push( template.lpc.manualServoPin );

	//console.log(tempSensePins);
	//console.log(tempSensePins);

-%>
heat.tempSensePins = {<%- util.makePlainArrayString(tempSensePins) %>}; //Max of 3 entries (ADC pins used for therms, order not important)
//heat.spiTempSensorCSPins = { }; //Max of 2 entries
	 
lpc.HWPWM.frequencyHz = 250;
lpc.slowPWM.frequencyHz = 10; //(for Bed PWM)
lpc.fastPWM.frequencyHz = 250; //(for Hotend/Fan PWM not on a HW PWM pin)
